import os
import sys

from types import NoneType
from typing import Any

from rich import console
from rich.table import Table

import json
import toml


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
CURENT_CMD = console.Console()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TYPE_TO_TEXT = {
    str: 'String',
    int: 'Number',
    float: 'Number',
    bool: 'bool',
    list: 'Array',
    NoneType: 'null',
}
BASE_PATH           = os.path.dirname(os.path.abspath(__file__))
BACKUP_PATH         = os.path.join(BASE_PATH, 'backups')
PATH_TO_SETTINGS    = os.path.join(BASE_PATH, '.toml')
PATH_TO_DATABASE    = os.path.join(BASE_PATH, '.json')
EMOJI = [
    '‚ù§ (^·µ•^)',      # –°–ø–∞—Å–∏–±–æ!
    'üß™ (·ªòÀ∞0)',     # –í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    '‚ùå (>À∞<)',     # –û—à–∏–±–∫–∞!
    'üõ† ( ·ªòÀ∞0)//',   # –ß–∏–Ω–∏—Ç!
]


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
HELP_TEXT = '''
[#af00ff]‚ô• (^·µ•^)  <- QWERTY (–æ–Ω–∞ —Ç–µ–±—è –±—É–¥–µ—Ç —Å–æ–ø—Ä–æ–≤–∞–∂–¥–∞—Ç—å –≤ QWE!)[/]

[violet]–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:[/]
[green]* 11[/]       - [yellow]–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π[/]
[green]* 12[/]       - [yellow]–ó–∞–π—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π[/]
[green]* 13[/]       - [yellow]–°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏[/]

[violet]–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö:[/]
[green]* 21[/]       - [yellow]–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é[/]
[green]* 22[/]       - [yellow][/]
[green]* 23[/]       - [yellow][/]

[violet]–ö–æ–Ω—Å–æ–ª—å:[/]
[green]* 31 [/]       - [yellow]–û—Ç—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏[/]
[green]* 32 [/]       - [yellow]–í—ã—Ö–æ–¥[/]
[green]* 33 [/]       - [yellow]–ü–æ–º–æ—â—å[/]
[green]* 34 [/]       - [yellow]–ó–∞–ø—É—Å–∫–∞–µ—Ç ".json" –≤ VS Code[/]

[violet]–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:[/]
[green]* 33[/]
[green]* /?[/]
[green]* help[/]
'''[1:-1]



# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –±–µ–∫–∞–∫–ø—É
def reloadToBackup():
    from datetime import datetime

    global BACKUP_PATH
    global CURENT_CMD
    global EMOJI

    names = os.listdir(BACKUP_PATH)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –±–µ–∫–∞–ø—ã
    if names.__len__():
        dates = [datetime.strptime(name, "%d.%m.%Y") for name in names]
        afterDate = max(dates)
        strAfterDate = afterDate.strftime("%d.%m.%Y")
        pathToAfterFile = os.path.join(BACKUP_PATH, strAfterDate)
        
        with open(pathToAfterFile, 'r', encoding='utf-8') as fromFile:
            with open(PATH_TO_DATABASE, 'w', encoding='utf-8') as toFile:
                toFile.write( fromFile.read() )

    # –ï—Å–ª–∏ –±–µ–∫–∞–ø–æ–≤ –Ω–µ—Ç
    else:
        CURENT_CMD.print(
            "[red]–°–∏–Ω—Ç—É–∞—Ü–∏—è —Ö—É—ë–≤–∞—è... –ë–µ–∫–∞–ø–æ–≤ –Ω–µ—Ç, –Ω–æ –≤—ã –¥–µ—Ä–∂–∏–µ—Ç—Å—å[/]\n"
            f"[red]{EMOJI[4]}[/]\n"
            "[red][/]\n"
        )


# –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .toml
def loadSettings():
    global SETTINGS_QWE
    global CURENT_CMD
    global PATH_TO_SETTINGS
    global EMOJI

    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .toml
    if os.path.exists(PATH_TO_SETTINGS):
        with open(PATH_TO_SETTINGS, 'r', encoding='utf-8') as file:
            SETTINGS_QWE = toml.load(file)
    else:
        CURENT_CMD.print(f'[red]{EMOJI[2]} –û—à–∏–±–∫–∞! <- –§–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ".toml" –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ—á–µ–Ω–∏—Ç—å? (Y/N <- Y –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')

        match input('>> '):
            case 'N' | 'n':
                exit(1)
            
            case _:
                CURENT_CMD.print(f'[yellow]{EMOJI[3]} –ò—Å–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–ª–µ–º—É...')

                with open('.toml', 'w', encoding='utf-8') as file:
                    file.write('# –¢—É—Ç –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ QWESAS')


# –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .json
def loadDataBase():
    global SETTINGS_QWE
    global CURENT_CMD
    global PATH_TO_DATABASE
    global EMOJI

    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .json
    if os.path.exists(PATH_TO_DATABASE):
        with open(PATH_TO_DATABASE, 'r', encoding='utf-8') as file:
            SETTINGS_QWE = json.load(file)
    else:
        CURENT_CMD.print(
            f'[red]{EMOJI[2]} –û—à–∏–±–∫–∞! <- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ".json" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n'
            '–û—Ç—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ç–µ—Ä—é –≤—Å–µ—Ö –Ω–µ–¥–∞–≤–Ω–æ-–∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π[/]\n'
            '[yellow]1 - –ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —É—Ü–µ–ª–µ–≤—à–∏–µ –ø–∞—Ä–æ–ª–∏ –≤ –±–µ–∫–∞–ø–∞—Ö\n'
            '2 - –ê –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª\n'
            'q - –û—Ç–º–µ–Ω–∞[/]\n'
            "–ß—Ç–æ –≤—ã–±—Ä–∞—Ç—å? (1/2/q, 1 - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, q - –≤—ã—Ö–æ–¥)"
        )

        match input('>> '):
            case '2':
                CURENT_CMD.print(f'[yellow]{EMOJI[3]} –ò—Å–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–±–ª–µ–º—É...')
                
                with open(PATH_TO_DATABASE, 'w', encoding='utf-8') as file:
                    file.write("{}")
            
            case 'q':
                exit(0)
            
            case _:
                reloadToBackup()


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
def printCategory(dataBase: dict):
    table = Table(border_style='green', caption_style='green', title_justify='left', title_style='green')

    table.add_column('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')

    for key in dataBase:
        table.add_row(key)

    CURENT_CMD.print(table)


# –ó–∞–π—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
def changeCategory(dataBase: dict):
    table = Table(border_style='green', caption_style='green', title_justify='left', title_style='green')

    table.add_column('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
    table.add_column('–ü–æ–ª—è')
    table.add_column('–¢–∏–ø –ø–æ–ª—è')
    table.add_column('–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è')

    categorys: list[str] = []
    fields: list[list[str, str, Any]] = []

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–ª–µ–π
    for key in dataBase:
        if isinstance(dataBase[key], dict):
            categorys.append(key)
        else:
            t = type(dataBase[key])
            fields.append( (key, TYPE_TO_TEXT[t], dataBase[key]) )
    
    # –í—ã–≤–æ–¥
    i = 0
    while 1:
        category = ''
        field = ''

        if len(categorys) > i:
            category = categorys[i]
        
        if len(fields) > i:
            field = fields[i]

        if category == '' and field == '':
            break
        
        if field:
            table.add_row(category, field[0], field[1], str(field[2]))
        else:
            table.add_row(category, '', '', '')

        i += 1

    CURENT_CMD.print(table)


def getDataBaseFile() -> dict:
    with open(PATH_TO_DATABASE, 'r', encoding='utf-8') as file:
        dataBase = json.load(file)

    return dataBase


# –ì–ª–∞–≤–Ω–∞—è
if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∑–∫–∞
    loadSettings()
    loadDataBase()

    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    invitation = '(–°–∏—Å—Ç–µ–º–∞)'

    dataBase = getDataBaseFile()

    while 1:
        CURENT_CMD.print(f'[#34F6C3]{invitation} >> ', end='')
        cmd = input()

        match cmd:
            # –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–ª–µ–π –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            case '11':
                printCategory(dataBase)
            
            # –ó–∞–π—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            case '12':
                changeCategory(dataBase)



            # Cls
            case '31':
                os.system('cls')

            # Exit
            case '32':
                exit(0)

            # Help
            case '33' | '/?' | 'help':
                CURENT_CMD.print(HELP_TEXT)

            # VSCODE
            case '34':
                os.system('code ' + PATH_TO_DATABASE)
